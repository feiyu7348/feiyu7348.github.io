<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python类中的方法</title>
      <link href="/2022/11/02/python-lei-zhong-de-fang-fa/"/>
      <url>/2022/11/02/python-lei-zhong-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>静态方法、类方法、属性方法</p><span id="more"></span><h2 id="staticmethod"><a href="#staticmethod" class="headerlink" title="@staticmethod"></a>@staticmethod</h2><p>staticmethod用于修饰类中的方法,使其可以在<strong>不创建类实例</strong>的情况下调用方法，这样做的好处是执行效率比较高。当然，也可以像一般的方法一样用实例调用该方法。该方法一般被称为静态方法。静态方法<strong>不可以引用类中的属性或方法</strong>，其参数列表也<strong>不需要约定的默认参数self</strong>。我个人觉得，静态方法就是类对外部函数的封装，有助于优化代码结构和提高程序的可读性。当然了，被封装的方法应该尽可能的和封装它的类的功能相匹配。</p><h2 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h2><p>使用@property装饰器来创建<strong>只读属性</strong>，@property装饰器会将<strong>方法</strong>转换为相同名称的<strong>只读属性</strong>,可以与所定义的属性配合使用，这样可以防止属性被修改。</p><h2 id="classmethod"><a href="#classmethod" class="headerlink" title="@classmethod"></a>@classmethod</h2><p>classmethod 修饰符对应的函数<strong>不需要实例化，不需要 self 参数</strong>，但<strong>第一个参数需要是表示自身类的 cls 参数</strong>，可以来调用类的属性，类的方法，实例化对象等。<br>返回函数的类方法。<br>可以用来为一个类创建一些预处理的实例。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由</title>
      <link href="/2022/11/01/lu-you/"/>
      <url>/2022/11/01/lu-you/</url>
      
        <content type="html"><![CDATA[<p>静态路由、策略路由、虚拟路由</p><span id="more"></span><h2 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h2><p>静态路由是由用户管理员在路由器中手动配置的固定路由</p><h2 id="策略路由"><a href="#策略路由" class="headerlink" title="策略路由"></a>策略路由</h2><p>策略路由简称PBR（Policy-Based Routing），是针对某种数据包，直接制定的选路策略。</p><h2 id="虚拟路由"><a href="#虚拟路由" class="headerlink" title="虚拟路由"></a>虚拟路由</h2><p>虚拟路由器（vRouter）是一种软件功能，它在软件中复制基于硬件的第3层Internet协议（IP）路由的功能</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cilium</title>
      <link href="/2022/10/29/cilium/"/>
      <url>/2022/10/29/cilium/</url>
      
        <content type="html"><![CDATA[<blockquote><p>cilium笔记<br> <span id="more"></span></p></blockquote><p>😉😊😋😎😍😘<br>⭕✅☑✔✖❌❎🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜☀🌝<br><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> </p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cilium </tag>
            
            <tag> CNI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2022/10/25/linux/"/>
      <url>/2022/10/25/linux/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Linux报错笔记<br> <span id="more"></span></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2022/10/23/git/"/>
      <url>/2022/10/23/git/</url>
      
        <content type="html"><![CDATA[<p>Git笔记 </p><blockquote><p>语雀版本 <a href="https://www.yuque.com/feifeishuaifu/xuwmux/qcu1z4">https://www.yuque.com/feifeishuaifu/xuwmux/qcu1z4</a></p></blockquote> <span id="more"></span><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h3><ol><li><code>git pull origin master</code> ，在master分支下，保证当前代码与线上同步，是最新的<br>  a. master 是以前 Github 上的默认主分支，现在已经更换为 main</li><li><code>git branch &lt;分支名&gt;</code>，新建分支。</li><li><code>git checkout &lt;分支名&gt;</code>，切换 到新建的分支上，再进行下一步。</li><li><code>git push origin &lt;分支名&gt;</code> ,把本地分支推到远端，让远端也有一个你的分支，用来后面提交你的代码。</li><li>新建分支并切换到该分支：<code>git checkout -b &lt;分支名&gt;</code></li></ol><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><ol><li>删除本地分支 ( 切换到master分支之后再删除 ) <code>git branch -d &lt;分支名&gt;</code></li><li>删除远端分支 <code>git push origin --delete &lt;分支名&gt;</code></li></ol><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>如果你基于主分支master新建了分支dev，再基于dev分支新建了一个分支test，在test分支开发完成后，需要将test合并到dev分支上。此时，先用<code>git branch</code> 查看自己在哪个分支上，然后g<code>it checkout dev(切换到需要合并的分支上)</code>，最后<code>git merge test</code>（在dev分支上执行这句，意思是将test合并到dev分支上）</p><h3 id="分支命名"><a href="#分支命名" class="headerlink" title="分支命名"></a>分支命名</h3><ol><li>master 分支<br>  a. 主分支，也是用于部署生产环境的分支，所有提供给用户使用的正式版本，都在这个主分支上发布。为确保 master 分支稳定性， master 分支一般由 develop 以及 hotfix 分支合并，任何时间都不能直接修改代码。</li><li>develop 分支<br>  a. 开发分支，始终保持最新完成以及 bug 修复后的代码，一般开发的新功能时，feature 分支都是基于 develop 分支下创建的。<br>  b. 如果想正式对外发布，就在 master 分支上，对 develop 分支进行”合并”（merge）。</li><li>feature 分支<br>  a. 开发新功能时，以 develop 为基础创建 feature 分支<br>  b. 分支命名: feature/ 开头的为特性分支</li><li>release 分支<br>  a. 预上线分支，发布提测阶段，会 release 分支代码为基准提测。当有一组 feature 开发完成，首先会合并到 develop 分支，进入提测时会创建 release 分支。<br>  b. 如果测试过程中若存在 bug 需要修复，则直接由开发者在 release 分支修复并提交。当测试完成之后，合并 release 分支到 master 和 develop 分支，此时 master 为最新代码，用作上线。<br>  <img src="/2022/10/23/git/release.png" alt="release"></li><li>hotfix 分支<br>  a. 分支命名: hotfix/ 开头的为修复分支，它的命名规则与 feature 分支类似。线上出现紧急问题时，需要及时修复，以 master 分支为基线，创建 hotfix 分支，修复完成后，需要合并到 master 分支和 develop 分支。<br>  <img src="/2022/10/23/git/hotfix.png" alt="hotfix"></li></ol><h2 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h2><ol><li><code>git status</code>   查看改变的文件</li><li><code>git add .</code>  添加到缓存区</li><li><code>git commit -m ‘本次提交的描述’</code><br>  a. Commit messages格式要求<br> ⅰ. 标题：50个字符以内，描述主要变更内容<br> ⅱ. 主体内容：更详细的说明文本，建议72个字符以内。需要描述的信息包括:<ol><li>为什么这个变更是必须的? 它可能是用来修复一个bug，增加一个feature，提升性能、可靠性、稳定性等等</li><li>他如何解决这个问题? 具体描述解决问题的步骤</li><li>是否存在副作用、风险?<br> ⅲ. 如果需要的话可以添加一个链接到issue地址或者其它文档</li></ol></li><li><code>git push origin &lt;分支名&gt;</code>   push是从本地向远端推代码，也就是把自己写的代码提交上去<br>  a. 执行完上一步，有可能报错，此时淡定，不认识英语的话在线翻译是干嘛的，大多数时候提示你，本地落后于远端，（意思就是远端比本地多了一些代码，为什么会出现这种情况呢，肯定是你跟别人共用一个分支，他提交了一段代码到远端，所以导致你的本地落后于远端）既然落后了，那就把他更新成最新的<br>  <img src="/2022/10/23/git/push.png" alt="push"><br>  b. 本地和远程改了同一段代码，手动改掉冲突，留下一个再进行提交<br>  <img src="/2022/10/23/git/pull.png" alt="pull"></li><li><code>git pull --rebase origin &lt;远程分支名&gt;</code>，如：<code>git pull —rebase origin master</code></li><li>先解决冲突，然后执行 <code>git add .</code></li><li>解决完冲突之后   <code>git rebase —continue</code></li><li>此时再提交你的代码 <code>git push origin &lt;分支名&gt;</code></li><li>此时若显示，当前分支落后于master分支，则需要强推，<code>git push -f origin &lt;分支名&gt;</code>，若不报错，则rebase成功。</li></ol><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><ol><li><code>git log --oneline</code><br>  <img src="/2022/10/23/git/log.png" alt="log"></li><li><code>git log --graph</code> 查看分支图</li></ol><h2 id="撤回操作"><a href="#撤回操作" class="headerlink" title="撤回操作"></a>撤回操作</h2><h3 id="撤销-git-add"><a href="#撤销-git-add" class="headerlink" title="撤销 git add"></a>撤销 <code>git add</code></h3><ol><li><code>git reset HEAD</code> 如果后面什么都不跟的话 就是上一次add 里面的全部撤销了</li><li><code>git reset HEAD XXX/XXX/XXX.js</code> 就是对某个文件进行撤销了</li></ol><h3 id="撤销-git-commit-m-39-本次修改说明-39"><a href="#撤销-git-commit-m-39-本次修改说明-39" class="headerlink" title="撤销 git commit -m '本次修改说明'"></a>撤销 <code>git commit -m '本次修改说明'</code></h3><ol><li><code>git reset --soft HEAD^</code>这样就成功的撤销了你的commit。注意，仅仅是撤回commit操作，写的代码仍然保留。<br>  a. HEAD^的意思是上一个版本，也可以写成HEAD~1<br>  b. 如果进行了2次commit，想都撤回，可以使用HEAD~2</li><li>参数：<br>  a. –mixed意思是：不删除工作空间改动代码，撤销commit，并且撤销git add . 操作，这个为默认参数，<code>git reset --mixed HEAD^</code> 和 <code>git reset HEAD^</code> 效果是一样的。<br>  b. –soft 不删除工作空间改动代码，撤销commit，不撤销<code>git add .</code><br>  c. -hard 删除工作空间改动代码，撤销commit，撤销<code>git add .</code>，注意完成这个操作后，就恢复到了上一次的commit状态。<br>  d. 如果commit注释写错了，只是想改一下注释，只需要<code>git commit --amend</code>，此时会进入默认vim编辑器，修改注释完毕后保存就好了。</li></ol><h2 id="修改别名"><a href="#修改别名" class="headerlink" title="修改别名"></a>修改别名</h2><p><code>git config --global alias.co checkout</code><br>将创建一个git别名来执行此操作。它会将以下条目添加到全局~/.gitconfig文件中：</p><pre><code class="shell">[alisa]  co = checkout</code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/06/22/hello-world/"/>
      <url>/2022/06/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
