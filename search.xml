<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>grpc</title>
      <link href="/2023/04/04/grpc/"/>
      <url>/2023/04/04/grpc/</url>
      
        <content type="html"><![CDATA[<p>grpc介绍</p><span id="more"></span><blockquote><p><a href="https://zhuanlan.zhihu.com/p/363672930">https://zhuanlan.zhihu.com/p/363672930</a><br><a href="https://juejin.cn/post/7047885453336248327">https://juejin.cn/post/7047885453336248327</a></p></blockquote><p>gRPC是一个现代的开源高性能远程过程调用(RPC)框架，可以在任何环境中运行。它可以有效地连接数据中心内和跨数据中心的服务，支持负载均衡、跟踪、健康检查和身份验证。它也适用于分布式计算，将设备、移动应用程序和浏览器连接到后端服务</p><h2 id="gRPC-VS-Restful"><a href="#gRPC-VS-Restful" class="headerlink" title="gRPC VS Restful"></a>gRPC VS Restful</h2><p>gRPC和Restful之间的对比，从文档规范、消息编码、传输协议、传输性能、传输形式、浏览器的支持度以及数据的可读性、安全性等方面进行比较。</p><h3 id="文档规范"><a href="#文档规范" class="headerlink" title="文档规范"></a>文档规范</h3><p>gRPC使用proto文件编写接口（API），文档规范比Restful更好，因为proto文件的语法和形式是定死的，所以更为严谨、风格统一清晰；而Restful由于可以使用多种工具进行编写（只要人看得懂就行），每家公司、每个人的攥写风格又各有差异，难免让人觉得比较混乱。</p><h3 id="消息编码"><a href="#消息编码" class="headerlink" title="消息编码"></a>消息编码</h3><p>消息编码这块，gRPC使用protobuf进行消息编码，而Restful一般使用JSON进行编码</p><h3 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h3><p>传输协议这块，gRPC使用HTTP/2作为底层传输协议，据说也可替换为其他协议，但目前还未考证；而RestFul则使用HTTP。</p><h3 id="传输性能"><a href="#传输性能" class="headerlink" title="传输性能"></a>传输性能</h3><p>由于gRPC使用protobuf进行消息编码（即序列化），而经protobuf序列化后的消息体积很小（传输内容少，传输相对就快）；再加上HTTP/2协议的加持（HTTP1.1的进一步优化），使得gRPC的传输性能要优于Restful。</p><h3 id="传输形式"><a href="#传输形式" class="headerlink" title="传输形式"></a>传输形式</h3><p>传输形式这块，gRPC最大的优势就是支持流式传输，传输形式具体可以分为四种（unary、client stream、server stream、bidirectional stream），这个后面我们会讲到；而Restful是不支持流式传输的。</p><h3 id="浏览器的支持度"><a href="#浏览器的支持度" class="headerlink" title="浏览器的支持度"></a>浏览器的支持度</h3><p>不知道是不是gRPC发展较晚的原因，目前浏览器对gRPC的支持度并不是很好，而对Restful的支持可谓是密不可分，这也是gRPC的一个劣势，如果后续浏览器对gRPC的支持度越来越高，不知道gRPC有没有干饭Restful的可能呢？</p><h3 id="消息的可读性和安全性"><a href="#消息的可读性和安全性" class="headerlink" title="消息的可读性和安全性"></a>消息的可读性和安全性</h3><p>由于gRPC序列化的数据是二进制，且如果你不知道定义的Request和Response是什么，你几乎是没办法解密的，所以gRPC的安全性也非常高，但随着带来的就是可读性的降低，调试会比较麻烦；而Restful则相反（现在有HTTPS，安全性其实也很高）</p><h3 id="代码的编写"><a href="#代码的编写" class="headerlink" title="代码的编写"></a>代码的编写</h3><p>由于gRPC调用的函数，以及字段名，都是使用stub文件的，所以从某种角度看，代码更不容易出错，联调成本也会比较低，不会出现低级错误，比如字段名写错、写漏。</p><h3 id="gRPC的适用场景"><a href="#gRPC的适用场景" class="headerlink" title="gRPC的适用场景"></a>gRPC的适用场景</h3><p>从上面gRPC和Restful的比较中，我们其实也从侧面了解gRPC的优劣势，也能顺势推断出其应用场景。</p><p><strong>总的来说，gRPC主要用于公司内部的服务调用，性能消耗低，传输效率高，服务治理方便。Restful主要用于对外，比如提供接口给前端调用，提供外部服务给其他人调用等。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python类中的方法</title>
      <link href="/2022/11/02/python-lei-zhong-de-fang-fa/"/>
      <url>/2022/11/02/python-lei-zhong-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>静态方法、类方法、属性方法</p><span id="more"></span><h2 id="staticmethod"><a href="#staticmethod" class="headerlink" title="@staticmethod"></a>@staticmethod</h2><p>staticmethod用于修饰类中的方法,使其可以在<strong>不创建类实例</strong>的情况下调用方法，这样做的好处是执行效率比较高。当然，也可以像一般的方法一样用实例调用该方法。该方法一般被称为静态方法。静态方法<strong>不可以引用类中的属性或方法</strong>，其参数列表也<strong>不需要约定的默认参数self</strong>。我个人觉得，静态方法就是类对外部函数的封装，有助于优化代码结构和提高程序的可读性。当然了，被封装的方法应该尽可能的和封装它的类的功能相匹配。</p><h2 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h2><p>使用@property装饰器来创建<strong>只读属性</strong>，@property装饰器会将<strong>方法</strong>转换为相同名称的<strong>只读属性</strong>,可以与所定义的属性配合使用，这样可以防止属性被修改。</p><h2 id="classmethod"><a href="#classmethod" class="headerlink" title="@classmethod"></a>@classmethod</h2><p>classmethod 修饰符对应的函数<strong>不需要实例化，不需要 self 参数</strong>，但<strong>第一个参数需要是表示自身类的 cls 参数</strong>，可以来调用类的属性，类的方法，实例化对象等。<br>返回函数的类方法。<br>可以用来为一个类创建一些预处理的实例。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由</title>
      <link href="/2022/11/01/lu-you/"/>
      <url>/2022/11/01/lu-you/</url>
      
        <content type="html"><![CDATA[<p>静态路由、策略路由、虚拟路由</p><span id="more"></span><h2 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h2><p>静态路由是由用户管理员在路由器中手动配置的固定路由</p><h2 id="策略路由"><a href="#策略路由" class="headerlink" title="策略路由"></a>策略路由</h2><p>策略路由简称PBR（Policy-Based Routing），是针对某种数据包，直接制定的选路策略。</p><h2 id="虚拟路由"><a href="#虚拟路由" class="headerlink" title="虚拟路由"></a>虚拟路由</h2><p>虚拟路由器（vRouter）是一种软件功能，它在软件中复制基于硬件的第3层Internet协议（IP）路由的功能</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cilium</title>
      <link href="/2022/10/29/cilium/"/>
      <url>/2022/10/29/cilium/</url>
      
        <content type="html"><![CDATA[<blockquote><p>cilium笔记<br> <span id="more"></span></p></blockquote><p>😉😊😋😎😍😘<br>⭕✅☑✔✖❌❎🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜☀🌝<br><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> </p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cilium </tag>
            
            <tag> CNI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2022/10/25/linux/"/>
      <url>/2022/10/25/linux/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Linux报错笔记<br> <span id="more"></span></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/06/22/hello-world/"/>
      <url>/2022/06/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
